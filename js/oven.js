// Generated by CoffeeScript 1.7.1
var NextLoad, Oven, Progressbar, next, oven, progress, r;

Oven = (function() {
  function Oven() {
    this.dummyFill = [];
    this.actualDevices = {};
    this.loadActualLoadedDevices();
  }

  Oven.prototype.loadActualLoadedDevices = function() {
    var ajax;
    ajax = $.getJSON('php/getActualDevicesFromOven.php');
    ajax.done((function(_this) {
      return function(data) {
        var dev, _i, _ref;
        for (dev = _i = _ref = 43 - data.length; _ref <= 1 ? _i <= 1 : _i >= 1; dev = _ref <= 1 ? ++_i : --_i) {
          _this.dummyFill.push('');
        }
        console.log(data.length);
        _this.actualDevices = data;
        r.set('dummyFill', _this.dummyFill);
        r.set('devices', _this.actualDevices);
        return r.set('loading', false);
      };
    })(this));
    return ajax.fail(function() {
      return r.set({
        error: {
          status: true,
          text: 'Fallo al cargar los carrier de la base de datos',
          header: 'Falla de base de datos'
        },
        loading: false
      });
    });
  };

  Oven.prototype.loadConfig = function() {};

  Oven.prototype.ingresar = function(carrier) {
    var ajax;
    if (r.data.user.name !== '') {
      ajax = $.getJSON('php/serverCommander.php', {
        action: 'ingresar',
        carrier: carrier,
        empleado: r.data.user.name
      });
      ajax.done((function(_this) {
        return function(data) {
          console.log(data);
          return console.log(carrier);
        };
      })(this));
      return ajax.fail(function(data) {});
    } else {
      throw "No se especifico el nombre de usuario";
    }
  };

  Oven.prototype.sacar = function(carrier, index) {
    var ajax;
    if (r.data.user.name !== '') {
      ajax = $.getJSON('php/serverCommander.php', {
        action: 'sacar',
        carrier: carrier,
        empleado: r.data.user.name
      });
      ajax.done((function(_this) {
        return function(data) {
          _this.actualDevices.splice(index, 1);
          return console.log(data);
        };
      })(this));
      return ajax.fail((function(_this) {
        return function(data) {
          r.set('error', {
            status: true,
            text: "No se pudo sacar la demanda " + carrier,
            header: "Error de base de datos"
          });
          window.setTimeout(function() {
            return r.set('error.status', false);
          }, 10000);
          throw "Fallo el sacar la demanda de la base de datos";
        };
      })(this));
    } else {
      throw "No se especifico el nombre de usuario";
    }
  };

  Oven.prototype.getAllOutFromOven = function() {
    var carrier, e;
    r.set('loading', false);
    carrier = {};
    try {
      while (this.actualDevices.length) {
        carrier = this.actualDevices.shift();
        this.sacar(carrier.CARRIER, 0);
      }
    } catch (_error) {
      e = _error;
      this.actualDevices.unshift(carrier);
      r.set({
        error: {
          status: true,
          text: "" + e,
          header: 'Error'
        },
        loading: false
      });
    }
    return this.loadActualLoadedDevices();
  };

  return Oven;

})();

NextLoad = (function() {
  function NextLoad() {
    this.items = [];
    this.reloadStoredInfo();
  }

  NextLoad.prototype.reloadStoredInfo = function() {
    var ajax;
    ajax = $.getJSON('php/serverCommander.php', {
      action: 'getNextLoadData'
    });
    ajax.done((function(_this) {
      return function(data) {
        _this.items = data || [];
        return r.set('nextLoad', _this.items);
      };
    })(this));
    return ajax.fail(function(data) {
      return console.log(data);
    });
  };

  NextLoad.prototype.validation = function() {
    var item, _i, _len, _ref, _results;
    _ref = this.items;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      _results.push(this.validate(item.carrier));
    }
    return _results;
  };

  NextLoad.prototype.validate = function(carrier) {
    return console.log(carrier);
  };

  NextLoad.prototype.saveOntoServer = function() {
    var ajax;
    ajax = $.getJSON('php/serverCommander.php', {
      action: 'saveNextLoadData',
      data: this.items
    });
    return ajax.done(function(data) {});
  };

  NextLoad.prototype.addToOven = function(index) {
    oven.ingresar(this.items[index].carrier);
    return this.del(index);
  };

  NextLoad.prototype.addAllToOven = function() {
    var carrier, e, _results;
    carrier = {};
    try {
      _results = [];
      while (this.items.length) {
        carrier = this.items.shift();
        _results.push(oven.ingresar(carrier.carrier));
      }
      return _results;
    } catch (_error) {
      e = _error;
      this.items.unshift(carrier);
      return r.set({
        error: {
          status: true,
          text: "" + e,
          header: 'Error'
        },
        loading: false
      });
    } finally {
      this.saveOntoServer();
      oven.loadActualLoadedDevices();
    }
  };

  NextLoad.prototype.add = function(carrier) {
    this.items.unshift({
      carrier: carrier
    });
    return this.saveOntoServer();
  };

  NextLoad.prototype.del = function(index) {
    this.items.splice(index, 1);
    return this.saveOntoServer();
  };

  return NextLoad;

})();

Progressbar = (function() {
  function Progressbar() {
    this.show = false;
    this.status = 0;
    this.active = false;
    this["do"]();
  }

  Progressbar.prototype["do"] = function() {
    return r.set('progressbar', {
      show: this.show,
      status: this.status,
      active: this.active
    });
  };

  Progressbar.prototype.show = function() {
    this.show = true;
    return this["do"]();
  };

  Progressbar.prototype.hide = function() {
    this.show = false;
    return this["do"]();
  };

  Progressbar.prototype.start = function() {
    this.show = true;
    this.status = 3;
    this.active = true;
    this["do"]();
    return this.timer = setInterval((function(_this) {
      return function() {
        _this.status++;
        return _this["do"]();
      };
    })(this), 1500);
  };

  Progressbar.prototype.complete = function() {
    this.status = 100;
    clearInterval(this.timer);
    this["do"]();
    return setTimeout((function(_this) {
      return function() {
        _this.show = false;
        return _this["do"]();
      };
    })(this), 1500);
  };

  return Progressbar;

})();

r = new Ractive({
  el: '#output',
  template: "#template",
  data: {
    loading: true,
    nuevoCarrier: '',
    user: {
      name: ''
    },
    error: {
      status: false,
      text: '',
      header: ''
    },
    progressbar: {
      show: false,
      status: 0
    },
    time: function(secs) {}
  }
});

oven = new Oven();

next = new NextLoad();

progress = new Progressbar();

r.on({
  addToNext: function(event) {
    event.original.preventDefault();
    if (r.data.insertable === true) {
      next.add(event.context.nuevoCarrier);
      return r.set('nuevoCarrier', '');
    }
  },
  getOutOfOven: function(event) {
    oven.sacar(event.context.CARRIER, event.keypath.match(/\d/i)[0]);
    return event.original.preventDefault();
  },
  deleteFromBuffer: function(e) {
    e.original.preventDefault();
    return next.del(e.keypath.match(/\d/i)[0]);
  },
  addToOven: function(e) {
    e.original.preventDefault();
    try {
      return next.addToOven(e.keypath.match(/\d/i)[0]);
    } catch (_error) {
      e = _error;
      return console.log("" + e);
    }
  },
  dismisError: function(e) {
    e.original.preventDefault();
    return r.set('error.status', false);
  },
  addAllToOven: function(e) {
    e.original.preventDefault();
    try {
      return next.addAllToOven();
    } catch (_error) {
      e = _error;
      return console.log("" + e);
    }
  },
  unloadOven: function(e) {
    e.original.preventDefault();
    return oven.getAllOutFromOven();
  }
});

r.observe('nuevoCarrier', function(carrier) {
  var exists;
  if (('' + carrier).length === 9 && typeof carrier === "number") {
    exists = _.find(r.data.nextLoad, function(el) {
      return parseInt(el.carrier, 10) === parseInt(r.data.nuevoCarrier, 10);
    });
    if (typeof exists === 'undefined') {
      return r.set('insertable', true);
    }
  } else {
    return r.set('insertable', false);
  }
});
